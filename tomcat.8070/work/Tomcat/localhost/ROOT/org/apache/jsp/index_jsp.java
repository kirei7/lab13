/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2016-12-04 14:27:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import ua.vntu.servlet.Data;
import ua.vntu.servlet.Data.Country;
import java.util.Map;
import java.util.List;
import java.util.Map.Entry;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ua.vntu.servlet.Data");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("ua.vntu.servlet.Data.Country");
    _jspx_imports_classes.add("java.util.Map.Entry");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Test webapp</title>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n");
      out.write("        <link href=\"style.css\" rel=\"stylesheet\"/>\n");
      out.write("        <script src=\"jquery-3.1.1.min.js\"></script>\n");
      out.write("        <script src=\"flot/jquery.flot.js\"></script>\n");
      out.write("        <script src=\"flot/jquery.flot.pie.js\"></script>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");

            Integer year;
            if (request.getParameter("year") == null || request.getParameter("year").isEmpty())
            {
                year = 2016;
            } else {
                year = Integer.parseInt(
                        request.getParameter("year")
                    );
            }
            Data dataProvider = new Data();
            Map<Country, Integer> chartData = dataProvider.getChartData();
            Map<Integer, List<Country>> results = dataProvider.getResults();
        
      out.write("\n");
      out.write("        <div class=\"demo-container\">\n");
      out.write("            <div id=\"placeholder\"></div>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"stat-container\">\n");
      out.write("                    <span>Показуються країни за\n");
      out.write("                        ");

                        out.print(year);
                        
      out.write("\n");
      out.write("                     рік\n");
      out.write("                    </span>\n");
      out.write("                    <ol>\n");
      out.write("                        ");

                            List<Country> countries = dataProvider.getResultsByYear(year);
                            String countriesOutput = "";
                            for(int i = 0; i < countries.size(); i++) {
                                countriesOutput += "<li>" +
                                countries.get(i) +
                                "</li>";
                            }
                            out.println(countriesOutput);
                        
      out.write("\n");
      out.write("                    </ol>\n");
      out.write("                    <form method=\"GET\" action=\"index.jsp\">\n");
      out.write("                        <select  name=\"year\">\n");
      out.write("                            ");

                            String formOutput = "";
                                for(Entry<Integer, List<Country>> entry : results.entrySet()) {
                                    formOutput += "<option value=\"" + entry.getKey() + "\"";
                                    if(entry.getKey().equals(year)) {
                                        formOutput += "selected";
                                    }
                                    formOutput += ">" + entry.getKey() + "</option>";
                                }
                                out.println(formOutput);
                            
      out.write("\n");
      out.write("                        </select>\n");
      out.write("                        <p><input type=\"submit\" value=\"Дивитись\"></p>\n");
      out.write("                    </form>\n");
      out.write("                </div>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("        var data = [\n");
      out.write("                ");

                    String output = "";
                    for (Entry<Country, Integer> entry : chartData.entrySet()) {
                    String countryName = entry.getKey().toString();
                        output +=
                        "{label: \"" +
                        countryName +
                        "- " + entry.getValue() + "\", data: " +
                        entry.getValue() +
                        "},";
                    }
                    output = output.substring(0, output.length()-1);
                    out.println(output);
                
      out.write("\n");
      out.write("            ];\n");
      out.write("            console.log(data);\n");
      out.write("            var placeholder = $(\"#placeholder\");\n");
      out.write("            $.plot(placeholder, data, {\n");
      out.write("                series: {\n");
      out.write("                    pie: {\n");
      out.write("                        show: true\n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                legend: {\n");
      out.write("                    sorted: \"reverse\"\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            function sort(arr) {\n");
      out.write("                var f;\n");
      out.write("                do {\n");
      out.write("                    f = false;\n");
      out.write("                    for(var i = 0; i < arr.length - 1; i++) {\n");
      out.write("                        if(arr[i].data < arr[i + 1].data) {\n");
      out.write("                        var temp = arr[i];\n");
      out.write("                        arr[i] = arr[i + 1];\n");
      out.write("                        arr[i + 1] = temp;\n");
      out.write("                        f = true;\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                } while(f);\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
